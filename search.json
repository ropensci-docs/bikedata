[{"path":[]},{"path":"https://docs.ropensci.org/bikedata/CONTRIBUTING.html","id":"opening-issues","dir":"","previous_headings":"","what":"Opening issues","title":"Contributing to bikedata","text":"easiest way note behavioural curiosities request new features opening github issue.","code":""},{"path":"https://docs.ropensci.org/bikedata/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to bikedata","text":"’d like contribute changes bikedata, use GitHub flow proposing, submitting, reviewing, accepting changes. haven’t done , ’s nice overview git , well best practices submitting pull requests . bikedata coding style diverges somewhat commonly used R style guide, primarily following two ways, improve code readability: (1) curly braces vertically aligned: (2) Also highlighted code additional whitespace permeates bikedata code. Words text separated whitespace, code words : natural result one ends writing space function (). ’s .","code":"this <- function () {     x <- 1 } this <- function(){     x <- 1 } this <- function1 (function2 (x)) this <- function1(function2(x)) this <- function ()"},{"path":"https://docs.ropensci.org/bikedata/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to bikedata","text":"want encourage warm, welcoming, safe environment contributing project. See code conduct information.","code":""},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"bikedata","text":"bikedata R package downloading aggregating data public bicycle hire, bike share, systems. Although many public bicycle hire systems world (see wikipedia list), relatively openly publish data system usage. bikedata package aims enable ready importing data systems provide , expanded ongoing basis systems publish open data. Cities names associated public bicycle hire systems currently included bikedata package, along numbers bikes docking stations, : systems record disseminate individual trip data, minimally including times places every trip starts ends. provide additional anonymised individual data, typically including whether user registered system , additional data including age, gender, residential postal code. list cities may obtained bike_cities() functions, details include demographic data bike_demographic_data(). Cities extensively developed systems cultures public hire bicycles, yet provide (publicly available) data include: current version bikedata R package can installed following command: development version installed, can loaded usual way:","code":"install.packages ('bikedata') devtools::install_github (\"mpadge/bikedata\") library (bikedata) ## Data for London, U.K. powered by TfL Open Data: ##   Contains OS data Ⓒ Crown copyright and database rights 2016 ## Data for New York City provided and owned by: ##   NYC Bike Share, LLC and Jersey City Bike Share, LLC (\"Bikeshare\") ##   see https://www.citibikenyc.com/data-sharing-policy ## Data for Washington DC (Captialbikeshare), Chiago (Divvybikes) and Boston (Hubway) ##   provided and owned by Motivate International Inc. ##   see https://www.capitalbikeshare.com/data-license-agreement ##   and https://www.divvybikes.com/data-license-agreement ##   and https://www.thehubway.com/data-license-agreement ## Nice Ride Minnesota license  https://assets.niceridemn.com/data-license-agreement.html"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"main-functions","dir":"Articles","previous_headings":"","what":"2. Main Functions","title":"bikedata","text":"bikedata function dl_bikedata() downloads individual trip data listed systems, function store_bikedata() stores SQLite3 database. example, following line download data Metro system Los Angeles CA, U.S.., store database named ‘bikedb’, store_bikedata() function returns number trips added database. downloaded data SQLite3 database stored default temporary directory current R session. data downloaded tempdir() course deleted termination active R session; use directories (described ) create enduring data must managed user. Successive calls store_bikedata() append additional data database. example, following line append data Chicago’s Divvy bike system year 2017 database created first call . function returns number trips added database, now less total number trips stored : Prior accessing data SQLite3 database, recommended create database indexes using function index_bikedata_db(): speed subsequent extraction aggregated data. stored individual trip data database, primary function bikedata package bike_tripmat(), extracts aggregate numbers trips pairs stations. minimal arguments function name database, name city databases holding data multiple cities. 2016, Los Angeles Metro system 64 docking stations, total 98,138 individual trips year. Trip matrices can also extracted long form using Details docking stations associated trip matrices can obtained Stations can also extracted particular cities: consistency avoid potential confusion function names, functions bikedata package begin prefix bike_ (except store_bikedata() dl_bikedata()). Databases generated bikedata package generally large (commonly least several GB), many functions may take considerable time execute. nevertheless possible explore package functionality quickly using additional helper function, bike_write_test_data(). function uses bike_dat data set provided package, contains details 200 representative trips cities listed . function writes data disk .zip files can read store_bikedata() function. .zip files generated bike_write_test_data() created default tempdir() current R session, deleted session termination. Specifying alternative bike_dir create enduring copies files location deleted finished. remainder vignette provides detail three distinct functional aspects downloading, storage, extraction data.","code":"bikedb <- file.path (tempdir (), \"bikedb.sqlite\") # or whatever dl_bikedata (city = 'la', dates = 2016, quiet = TRUE) store_bikedata (data_dir = tempdir (), bikedb = bikedb, quiet = TRUE) ## [1] 98138 dl_bikedata (city = 'divvy', dates = 2016, quiet = TRUE) store_bikedata (bikedb = bikedb, data_dir = tempdir (), quiet = TRUE) ## [1] 3595383 bike_db_totals (bikedb = bikedb) ## [1] 3693521 index_bikedata_db (bikedb = bikedb) tm <- bike_tripmat (bikedb = bikedb, city = 'la') class (tm); dim (tm); sum (tm) ## [1] \"matrix\" ## [1] 64 64 ## [1] 98138 bike_tripmat (bikedb = bikedb, city = 'la', long = TRUE) ## # A tibble: 4,096 × 3 ##    start_station_id end_station_id numtrips ##    <chr>            <chr>             <dbl> ##  1 la3005           la3005              252 ##  2 la3005           la3006               93 ##  3 la3005           la3007               23 ##  4 la3005           la3008              153 ##  5 la3005           la3010                5 ##  6 la3005           la3011               63 ##  7 la3005           la3014               40 ##  8 la3005           la3016               10 ##  9 la3005           la3018               31 ## 10 la3005           la3019               36 ## # ℹ 4,086 more rows bike_stations (bikedb = bikedb) ## # A tibble: 660 × 6 ##       id city  stn_id name  longitude latitude ##    <int> <chr> <chr>  <chr>     <dbl>    <dbl> ##  1     1 la    la3005 \"\"         34.0    -118. ##  2     2 la    la3006 \"\"         34.0    -118. ##  3     3 la    la3007 \"\"         34.1    -118. ##  4     4 la    la3008 \"\"         34.0    -118. ##  5     5 la    la3009 \"\"         34.0    -118. ##  6     6 la    la3010 \"\"         34.0    -118. ##  7     7 la    la3011 \"\"         34.0    -118. ##  8     8 la    la3013 \"\"         34.1    -118. ##  9     9 la    la3014 \"\"         34.1    -118. ## 10    10 la    la3016 \"\"         34.0    -118. ## # ℹ 650 more rows st <- bike_stations (bikedb = bikedb, city = 'ch') bike_write_test_data () store_bikedata (bikedb = 'testdb') bike_summary_stats (bikedb = 'testdb')"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"3. Downloading Data","title":"bikedata","text":"Data may downloaded dl_bikedata() function. ’s simplest form, function requires specification city data downloaded, although directory usually specified well:","code":"dl_bikedata (city = 'chicago', data_dir = '/data/bikedata/')"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"downloading-data-for-specific-date-ranges","dir":"Articles","previous_headings":"","what":"3.1 Downloading data for specific date ranges","title":"bikedata","text":"store_bikedata() dl_bikedata() accept additional argument (dates) specifying ranges dates data downloaded stored. format argument quite flexible , download data Washington DC’s Capital Bikeshare system 12 months year 2016, , download New York City data April August (inclusively) year. (Note default data_dir tempdir() current R session, downloaded files deleted upon session termination.) Dates can also entered character strings, following calls producing results equivalent preceding call, strict requirement format dates years must specified months, kind separator must used two except formatted single six-digit numbers character strings (YYYYMM). arguments city = 'new' city = 'CI' final call sufficient uniquely identify New York City’s citibike system. files previously downloaded nominated directory, calling dl_bikedata() function download data files already exist. function may thus used periodically refresh contents nominated directory new data files become available. systems disseminate data quarterly (Washington DC Los Angeles) bi-annual (Chicago) bases. dates argument cases translated appropriate quarterly bi-annual files. downloaded single files, thus following call actually download data entire first second quarters 2016. Even though database constructed store_bikedata() contain data beyond specified date ranges, nevertheless possible obtain trip matrix corresponding specific dates /times, described . dates argument can also passed store_bikedata. useful cases data loaded restricted set files given data directory.","code":"dl_bikedata (city = 'dc', dates = 16) dl_bikedata (city = 'ny', dates = 201604:201608) dl_bikedata (city = 'ny', dates = '2016/04:2016/08') dl_bikedata (city = 'new york', dates = '201604:201608') dl_bikedata (city = 'n.y.c.', dates = '2016-04:2016-08') dl_bikedata (city = 'new', dates = '2016 Apr-Aug') dl_bikedata (city = 'dc', dates = '2016.03-2016.05')"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"refreshing-data-sources","dir":"Articles","previous_headings":"","what":"3.2 Refreshing data sources","title":"bikedata","text":"dl_bikedata() function download data already exist nominated directory, can use periodically refresh data. , example, following function previously run end 2017: running , say, April 2018, download three additional files corresponding first three months 2018. data can added previously-constructed database usual call previous data stored nominated database, yet deleted local storage, new data can added first getting names previously stored files calling dl_bikedata, dates specified add files previously stored.","code":"dl_bikedata (city = 'sf', data_dir = '/data/stored/here') store_bikedata (city = 'sf', data_dir = '/data/stored/here', bikedb = bikedb) bike_stored_files (bikedb = bikedb = city = 'sf')"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"storing-data","dir":"Articles","previous_headings":"","what":"4. Storing Data","title":"bikedata","text":"mentioned , individual trip data stored single SQLite3 database, created default temporary directory current R session. Specifying path bikedb argument store_bikedata() function create database remain location explicitly deleted. nominated database created already exist, otherwise additional data appended existing database. described , dates argument can passed dl_bikedata() store_bikedata() download data within specified ranges dates. dl_bikedata() store_bikedata() primarily intended used download data specified cities. possible use latter store data cities simply calling store_bikedata (bikedb = bikedb), however request confirmation data cities really downloaded /stored. Intended general usage store_bikedata() function illustrated following line: Note passing city parameter store_bikedata() strictly necessary, ensure data nominated city loaded directories may contain additional data cities.","code":"dl_bikedata (bikedb = bikedb, city = 'ny', dates = '2014 aug - 2015 dec') ntrips <- store_bikedata (bikedb = bikedb, city = 'ny',                           data_dir = '/data/stored/here')"},{"path":[]},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"origin-destination-matrices","dir":"Articles","previous_headings":"5. Accessing Aggregate Data","what":"5.1 Origin-Destination Matrices","title":"bikedata","text":"briefly described introduction, primary function extracting aggregate data SQLite3 database established store_bikedata() bike_tripmat(). single mandatory argument naming database, function returns matrix numbers trips pairs stations. Trip matrices can returned either square form (default), rows columns named bicycle docking stations matrix entries tallying numbers rides pair stations, long form requesting bike_tripmat (..., long = TRUE). latter case return tibble three columns station_station_id, end_station_id, number_trips, demonstrated . data individual stations associated trip matrix can extracted bike_stations(), returns tibble containing 6 columns city, station code, station name, longitude, latitude. Station codes specified operators system, pre-pended 2-character city identifier (, example, first stations shown la3005). bike_stations() function generally return operational stations within given system, bike_tripmat() return stations operation requested time period. previous call stored data Chicago’s Divvybikes system year 2016 , trip matrix less entries full stations table, includes stations added since .","code":"dim (bike_tripmat (bikedb = bikedb, city = 'ch')) ## [1] 581 581 dim (bike_stations (bikedb = bikedb, city = 'ch')) ## [1] 596   6"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"temporal-filtering-of-trip-matrices","dir":"Articles","previous_headings":"5. Accessing Aggregate Data > 5.1 Origin-Destination Matrices","what":"5.1.1. Temporal filtering of trip matrices","title":"bikedata","text":"Trip matrices can also extracted particular dates, times, days week, specifying one optional arguments: start_date end_date start_time end_time weekday Arguments may cases specified range possible formats long unambiguous, long ‘larger’ units precede ‘smaller’ units (years months days, hours minutes seconds). Acceptable formats may illustrated specifying list arguments passed bike_tripmat(). done passing two lists bike_tripmat() via .call(), enabling second list (args1) subsequently modified. args1, two-digit start_date (end_date) interpreted represent year, one- two-digit _time interpreted represent hour. value end_time = 24 interpreted end_time = '23:59:59', value _time = 0 interpreted 00:00:00. following illustrate variety acceptable formats, _date _time arguments may specified either character numeric forms; former case arbitrary () separators. Regardless format, larger units must precede smaller units explained . Weekdays may specified characters, must simply unambiguous (admission currently inadequate internationalisation) correspond standard English names. Minimal character specifications thus '', 'm', 'tu', 'w', 'th', 'f', 'sa'. value weekday = 1 denotes Sunday, weekdays = 2:6 denote traditional working days, Monday Friday, weekends may denoted weekdays = c ('sa', '') weekdays = c (1, 7).","code":"args0 <- list (bikedb = bikedb, city = 'ny', args) args1 <- list (start_date = 16, end_time = 12, weekday = 1) tm <- do.call (bike_tripmat, c (args0, args1)) args1 <- list (start_date = '2016 May', end_time = '12:39', weekday = 2:6) args1 <- list (end_date = 20160720, end_time = 123915, weekday = c ('mo', 'we')) args1 <- list (end_date = '2016-07-20', end_time = '12:39:15', weekday = 2:6)"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"demographic-filtering-of-trip-matrices","dir":"Articles","previous_headings":"5. Accessing Aggregate Data > 5.1 Origin-Destination Matrices","what":"5.1.2. Demographic filtering of trip matrices","title":"bikedata","text":"described outset, bicycle hire systems several cities provide additional demographic information including whether cyclists registered system, , additional information including birth years genders. Note provision information voluntary, providers can guarantee accuracy data. systems provide demographic information listed function bike_demographic_data(), also lists nominal kinds demographic data provided different systems. Data can filtered demographic parameters additional optional arguments bike_tripmat() , registered (TRUE/FALSE, 'yes'/'', 0/1) birth_year (one four-digit numbers character strings) gender (‘m/f/.’, ‘male/female/’) Users required specify genders, values gender character strings beginning either f m (case-insensitive) interpreted request non-specified alternative values gender. Note many systems offer range potential birth years starting default value 1900, consequently significant number cyclists declare birth year. course possible combine optional parameters single query. example, value gender = 'xx' interpreted request data members nominal alternative genders. demographic data given registered users, registered parameter redundant query.","code":"bike_demographic_data () ##    city     city_name      bike_system demographic_data ## 1    bo        Boston           Hubway             TRUE ## 2    ch       Chicago            Divvy             TRUE ## 3    dc Washington DC CapitalBikeShare            FALSE ## 4    gu   Guadalajara           mibici             TRUE ## 5    la   Los Angeles            Metro            FALSE ## 6    lo        London        Santander            FALSE ## 7    mo      Montreal             Bixi            FALSE ## 8    mn   Minneapolis         NiceRide             TRUE ## 9    ny      New York         Citibike             TRUE ## 10   ph  Philadelphia           Indego            FALSE ## 11   sf      Bay Area       FordGoBike             TRUE tm <- bike_tripmat (bikedb = bikedb, city = 'ny', start_date = 2016,         start_time = 9, end_time = 24, weekday = 2:6, gender = 'xx',          birth_year = 1900:1950)"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"standardising-trip-matrices-by-durations-of-operation","dir":"Articles","previous_headings":"5. Accessing Aggregate Data > 5.1 Origin-Destination Matrices","what":"5.1.3. Standardising trip matrices by durations of operation","title":"bikedata","text":"bicycle hire systems progressively expanded time ongoing addition new docking stations. Total numbers counts within trip matrix thus generally less recently installed stations, older stations. bike_tripmat() function option, standardise = FALSE. Setting standardise = TRUE allows trip matrices standardised durations station operation, numbers trips pair stations reflect stations operation duration. Standardisation implements linear scaling total numbers trips station according total durations operation, counts final trip matrix scaled total number trips original matrix. standardisation two immediate consequences: Numbers trips pair stations necessarily integer values, rounded sake sanity three digits, corresponding maximal likely precision attainable daily differences operating durations; Trip numbers generally equal actual observed numbers. Counts longest operating durations lower actually recorded, counts recent stations greater observed values. standardise option nevertheless enables travel patterns different (groups ) stations statistically compared way free potentially confounding influence differing durations operation.","code":""},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"station-data","dir":"Articles","previous_headings":"5. Accessing Aggregate Data","what":"5.2. Station Data","title":"bikedata","text":"Data docking stations may accessed function bike_stations() demonstrated : function returns tibble detailing names locations bicycle stations present database. Station data specific cities may extracted specifying additional city argument.","code":"bike_stations (bikedb = bikedb) ## # A tibble: 660 × 6 ##       id city  stn_id name  longitude latitude ##    <int> <chr> <chr>  <chr>     <dbl>    <dbl> ##  1     1 la    la3005 \"\"         34.0    -118. ##  2     2 la    la3006 \"\"         34.0    -118. ##  3     3 la    la3007 \"\"         34.1    -118. ##  4     4 la    la3008 \"\"         34.0    -118. ##  5     5 la    la3009 \"\"         34.0    -118. ##  6     6 la    la3010 \"\"         34.0    -118. ##  7     7 la    la3011 \"\"         34.0    -118. ##  8     8 la    la3013 \"\"         34.1    -118. ##  9     9 la    la3014 \"\"         34.1    -118. ## 10    10 la    la3016 \"\"         34.0    -118. ## # ℹ 650 more rows bike_stations (bikedb = bikedb, city = 'ch') ## # A tibble: 596 × 6 ##       id city  stn_id name                          longitude latitude ##    <dbl> <chr> <chr>  <chr>                             <dbl>    <dbl> ##  1    67 ch    ch456  2112 W Peterson Ave               -87.7     42.0 ##  2    68 ch    ch101  63rd St Beach                     -87.6     41.8 ##  3    69 ch    ch109  900 W Harrison St                 -87.7     41.9 ##  4    70 ch    ch21   Aberdeen St & Jackson Blvd        -87.7     41.9 ##  5    71 ch    ch80   Aberdeen St & Monroe St           -87.7     41.9 ##  6    72 ch    ch346  Ada St & Washington Blvd          -87.7     41.9 ##  7    73 ch    ch341  Adler Planetarium                 -87.6     41.9 ##  8    74 ch    ch444  Albany Ave & 26th St              -87.7     41.8 ##  9    75 ch    ch511  Albany Ave & Bloomingdale Ave     -87.7     41.9 ## 10    76 ch    ch376  Artesian Ave & Hubbard St         -87.7     41.9 ## # ℹ 586 more rows"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"summary-statistics","dir":"Articles","previous_headings":"5. Accessing Aggregate Data","what":"5.3. Summary Statistics","title":"bikedata","text":"bikedata provides number helper functions extracting summary statistics SQLite3 database. function bike_summary_stats (bikedb) generates overview table. (function may take time execute large databases.) Additional helper functions provide individual components summary data, generally notably faster large databases function. primary individual function bike_db_totals(), can used extract total numbers either trips (default) stations (specifying trips = FALSE) entire database specific cities. primary components bike_summary_stats() dates first last trips entire database individual cities. dates can obtained directly function bike_datelimits(): helper function also provided determine whether files stored database represent latest available files.","code":"bike_summary_stats (bikedb) ## # A tibble: 3 × 6 ##   city  num_trips num_stations first_trip          last_trip        latest_files ##   <chr>     <dbl>        <dbl> <fct>               <fct>            <lgl>        ## 1 total   3693521          662 2016-01-01 00:07:00 2016-12-31 23:5… NA           ## 2 ch      3595383          596 2016-01-01 00:07:00 2016-12-31 23:5… TRUE         ## 3 la        98138           66 2016-07-07 04:17:00 2016-12-31 23:5… TRUE bike_db_totals (bikedb = bikedb) ## [1] 3693521 bike_db_totals (bikedb = bikedb, city = \"ch\") ## [1] 3595383 bike_db_totals (bikedb = bikedb, city = \"la\") ## [1] 93138 bike_db_totals (bikedb = bikedb, trips = FALSE) ## [1] 660 bike_db_totals (bikedb = bikedb, trips = FALSE, city = \"ch\") ## [1] 596 bike_db_totals (bikedb = bikedb, trips = FALSE, city = \"la\") ## [1] 64 bike_datelimits (bikedb = bikedb) ##                 first                  last  ## \"2016-01-01 00:07:00\" \"2016-12-31 23:57:52\" bike_datelimits (bikedb = bikedb, city = 'ch') c ('first' = \"2016-01-01 00:07:00\", 'last' = \"2016-12-31 23:57:52\") ##                 first                  last  ## \"2016-01-01 00:07:00\" \"2016-12-31 23:57:52\" bike_latest_files (bikedb = bikedb) c ('la' = TRUE, 'ch' = FALSE) ##    la    ch  ##  TRUE FALSE"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"time-series-of-daily-trips","dir":"Articles","previous_headings":"5. Accessing Aggregate Data","what":"5.4. Time Series of Daily Trips","title":"bikedata","text":"bike_tripmat() function provides spatial aggregation data. equivalent temporal aggregation provided function bike_daily_trips(), aggregates trips individual days. Daily trip counts can also standardised account differences numbers stations within system trip matrix standardisation described . standardisation helpful daily numbers trips generally increase increasing numbers stations. Standardisation returns time series daily trips reflecting system stations operation throughout entire time. tibble reveals two points immediate note: Trip numbers longer integer values, rounded three decimal places reflect highest plausible numerical accuracy; Standardised trip numbers considerably higher initial values, expansion Chicago Divvy system throughout year 2016.","code":"bike_daily_trips (bikedb = bikedb, city = 'ch') ## # A tibble: 366 × 2 ##    date       numtrips ##    <chr>         <dbl> ##  1 2016-01-01      935 ##  2 2016-01-02     1421 ##  3 2016-01-03     1399 ##  4 2016-01-04     3833 ##  5 2016-01-05     4189 ##  6 2016-01-06     4608 ##  7 2016-01-07     5028 ##  8 2016-01-08     3425 ##  9 2016-01-09     1733 ## 10 2016-01-10      993 ## # ℹ 356 more rows bike_daily_trips (bikedb = bikedb, city = 'ch', standardise = TRUE) ## # A tibble: 366 × 2 ##    date       numtrips ##    <chr>         <dbl> ##  1 2016-01-01    2469. ##  2 2016-01-02    2482. ##  3 2016-01-03    2201. ##  4 2016-01-04    5510. ##  5 2016-01-05    5884. ##  6 2016-01-06    6298. ##  7 2016-01-07    6630. ##  8 2016-01-08    4476. ##  9 2016-01-09    2265. ## 10 2016-01-10    1298. ## # ℹ 356 more rows"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"direct-database-access","dir":"Articles","previous_headings":"","what":"6. Direct database access","title":"bikedata","text":"Although bikedata package aims circumvent need access database directly, providing ready extraction trip data analytical visualisation needs, direct access may achieved either using convenient dplyr functions, powerful functionality provided RSQLite package. following code illustrates access using dplyr package: RSQLite package enables complex queries constructed. names stations, example, extracted using following code Many queries used bikedata package constructed way using RSQLite interface.","code":"db <- dplyr::src_sqlite (bikedb, create=F) dplyr::src_tbls (db) c (\"datafiles\", \"stations\", \"trips\") ## [1] \"datafiles\" \"stations\"  \"trips\" dplyr::collect (dplyr::tbl (db, 'datafiles')) ## # A tibble: 5 × 3 ##      id city  name                             ##   <int> <chr> <chr>                            ## 1     0 la    la_metro_gbfs_trips_Q1_2017.zip  ## 2     1 la    MetroBikeShare_2016_Q3_trips.zip ## 3     2 la    Metro_trips_Q4_2016.zip          ## 4     3 ch    Divvy_Trips_2016_Q1Q2.zip        ## 5     4 ch    Divvy_Trips_2016_Q3Q4.zip dplyr::collect (dplyr::tbl (db, 'stations')) ## # A tibble: 660 × 6 ##       id city  stn_id name  longitude latitude ##    <int> <chr> <chr>  <chr>     <dbl>    <dbl> ##  1     1 la    la3005 \"\"         34.0    -118. ##  2     2 la    la3006 \"\"         34.0    -118. ##  3     3 la    la3007 \"\"         34.1    -118. ##  4     4 la    la3008 \"\"         34.0    -118. ##  5     5 la    la3009 \"\"         34.0    -118. ##  6     6 la    la3010 \"\"         34.0    -118. ##  7     7 la    la3011 \"\"         34.0    -118. ##  8     8 la    la3013 \"\"         34.1    -118. ##  9     9 la    la3014 \"\"         34.1    -118. ## 10    10 la    la3016 \"\"         34.0    -118. ## # ℹ 650 more rows dplyr::collect (dplyr::tbl (db, 'trips')) ## # A tibble: 3,693,511 × 11 ##       id city  trip_duration start_time          stop_time      start_station_id ##    <int> <chr>         <dbl> <chr>               <chr>          <chr>            ##  1     1 la              180 2016-01-01 00:15:00 2017-01-01 00… a                ##  2     2 la             1980 2016-01-01 00:24:00 2017-01-01 00… a                ##  3     3 la              300 2016-01-01 00:28:00 2017-01-01 00… a                ##  4     4 la            10860 2016-01-01 00:38:00 2017-01-01 00… a                ##  5     5 la              420 2016-01-01 00:38:00 2017-01-01 00… a                ##  6     6 la              780 2016-01-01 00:39:00 2017-01-01 00… a                ##  7     7 la              600 2016-01-01 00:43:00 2017-01-01 00… a                ##  8     8 la              600 2016-01-01 00:56:00 2017-01-01 01… a                ##  9     9 la             2880 2016-01-01 00:57:00 2017-01-01 01… a                ## 10    10 la              960 2016-01-01 01:54:00 2017-01-01 02… a                ## # ℹ 3,693,501 more rows ## # ℹ 5 more variables: end_station_id <chr>, bike_id <chr>, user_type <chr>, ## #   birth_year <int>, gender <int> db <- RSQLite::dbConnect(RSQLite::SQLite(), bikedb, create = FALSE) qry <- \"SELECT stn_id, name FROM stations WHERE city = 'ch'\" stns <- RSQLite::dbGetQuery(db, qry) RSQLite::dbDisconnect(db) head (stns) ##   stn_id                       name ## 1  ch456        2112 W Peterson Ave ## 2  ch101              63rd St Beach ## 3  ch109          900 W Harrison St ## 4   ch21 Aberdeen St & Jackson Blvd ## 5   ch80    Aberdeen St & Monroe St ## 6  ch346   Ada St & Washington Blvd"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"visualisation-of-bicycle-trips","dir":"Articles","previous_headings":"","what":"7. Visualisation of bicycle trips","title":"bikedata","text":"bikedata package provide functions enabling visualisation aggregate trip data, primary focus enabling access aggregation simplest practicable way, myriad different ways users package likely want visualise data. section therefore relies packages illustrate ways trip matrices may visualised.","code":""},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"visualisation-using-r-base-functions","dir":"Articles","previous_headings":"7. Visualisation of bicycle trips","what":"7.1 Visualisation using R Base functions","title":"bikedata","text":"simplest spatial visualisation involves connecting geographical coordinates stations straight lines, numbers trips represented characteristics lines connecting pairs stations, thickness colours. can achieved following code, also illustrates generally useful visualisation purposes extract trip matrices long rather square form.","code":"stns <- bike_stations (bikedb = bikedb, city = 'la') ntrips <- bike_tripmat (bikedb = bikedb, city = 'la', long = TRUE) x1 <- stns$longitude [match (ntrips$start_station_id, stns$stn_id)] y1 <- stns$latitude [match (ntrips$start_station_id, stns$stn_id)] x2 <- stns$longitude [match (ntrips$end_station_id, stns$stn_id)] y2 <- stns$latitude [match (ntrips$end_station_id, stns$stn_id)] # Set plot area to central region of bike system xlims <- c (-118.27, -118.23) ylims <- c (34.02, 34.07) plot (stns$longitude, stns$latitude, xlim = xlims, ylim = ylims) cols <- rainbow (100) nt <- ceiling (ntrips$numtrips * 100 / max (ntrips$numtrips)) for (i in seq (x1))     lines (c (x1 [i], x2 [i]), c (y1 [i], y2 [i]), col = cols [nt [i]],         lwd = ntrips$numtrips [i] * 10 / max (ntrips$numtrips))"},{"path":"https://docs.ropensci.org/bikedata/articles/bikedata.html","id":"a-more-sophisticated-visualisation","dir":"Articles","previous_headings":"7. Visualisation of bicycle trips","what":"7.2 A More Sophisticated Visualisation","title":"bikedata","text":"following code illustrates sophisticated approach plotting data, using routines packages osmdata, stplanr, tmap. Begin extracting street network Los Angeles using osmdata package. Current stplanr routines require spatial objects class sp rather sf. compatibility current stplanr code, stns table also needs converted SpatialPointsDataFrame re-projected. data can used create stplanr::SpatialLinesNetwork can used trace routes bicycle stations along street network. first requires mapping bicycle station locations nearest nodes street network, converting start end stations ntrips table corresponding rows street network data frame. aggregate trips part network using sum_network_lines() function part current development version stplanr. finally plot tmap, trimming plot using previous limits exclude isolated stations","code":"library (magrittr) xlims_la <- range (stns$longitude, na.rm = TRUE) ylims_la <- range (stns$latitude, na.rm = TRUE) # expand those limits slightly ex <- 0.1 xlims_la <- xlims_la + c (-ex, ex) * diff (xlims_la) ylims_la <- ylims_la + c (-ex, ex) * diff (ylims_la) bbox <- c (xlims_la [1], ylims_la [1], xlims_la [2], ylims_la [2]) bbox <- c (xlims [1], xlims [2], ylims [1], ylims [2]) # Then the actual osmdata query to extract all OpenStreetMap highways highways <- osmdata::opq (bbox = bbox) %>%     osmdata::add_osm_feature (key = 'highway') %>%     osmdata::osmdata_sp (quiet = FALSE) stns_tbl <- bike_stations (bikedb = bikedb) stns <- sp::SpatialPointsDataFrame (coords = stns_tbl[,c('longitude','latitude')],                                     proj4string = sp::CRS(\"+init=epsg:4326\"),                                      data = stns_tbl) stns <- sp::spTransform (stns, highways$osm_lines@proj4string) la_net <- stplanr::SpatialLinesNetwork (sl = highways$osm_lines) # Find the closest node to each station nodeid <- stplanr::find_network_nodes (la_net, stns$longitude, stns$latitude) # Convert start and end station IDs in trips table to node IDs in `la_net` startid <- nodeid [match (ntrips$start_station_id, stns$stn_id)] endid <- nodeid [match (ntrips$end_station_id, stns$stn_id)] ntrips$start_station_id <- startid ntrips$end_station_id <- endid bike_usage <- stplanr::sum_network_links (la_net, data.frame (ntrips)) tmap::tm_shape (bike_usage, xlim = xlims, ylim = ylims, is.master=TRUE) +      tmap::tm_lines (col=\"numtrips\", lwd=\"numtrips\", title.col = \"Number of trips\",                     breaks = c(0, 200, 400, 600, 800, 1000, Inf),                     legend.lwd.show = FALSE, scale = 5) +      tmap::tm_layout (bg.color=\"gray95\", legend.position = c (\"right\", \"bottom\"),                      legend.bg.color = \"white\", legend.bg.alpha = 0.5) #tmap::save_tmap (filename = \"la_map.png\")"},{"path":"https://docs.ropensci.org/bikedata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Richard Ellison. Author. Tom Buckley. Author. Ryszard Szymański. Contributor. Bea Hernández. Reviewer.            Bea reviewed package ropensci, see https://github.com/ropensci/onboarding/issues/116 Elaine McVey. Reviewer.            Elaine reviewed package ropensci, see https://github.com/ropensci/onboarding/issues/116 SQLite Consortium. Contributor.            Authors included SQLite code","code":""},{"path":"https://docs.ropensci.org/bikedata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mark Padgham, Richard Ellison (2017). bikedata Journal Open Source Software, 2(20). URL https://doi.org/10.21105/joss.00471","code":"@Article{,   title = {bikedata},   author = {Mark Padgham and Richard Ellison},   journal = {The Journal of Open Source Software},   year = {2017},   volume = {2},   number = {20},   month = {Dec},   publisher = {The Open Journal},   url = {https://doi.org/10.21105/joss.00471},   doi = {10.21105/joss.00471}, }"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"1-installation","dir":"","previous_headings":"","what":"1 Installation","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"Currently development version can installed following command, loaded usual way","code":"devtools::install_github(\"ropensci/bikedata\") library (bikedata)"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"2-usage","dir":"","previous_headings":"","what":"2 Usage","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"Data may downloaded particular city stored SQLite3 database simple command, bikedb parameter provides name database, optional argument dates can used specify particular range dates (Jan-March 2016 example). store_bikedata function returns total number trips added specified database. primary objects returned bikedata packages ‘trip matrices’ contain aggregate numbers trips pair stations. extracted database : specified time period just 2 million trips 518 bicycle docking stations. Note associated databases can large, particularly absence dates restrictions, extracting data can take quite time. Data can also aggregated daily time series summary data contained given database can produced final field, latest_files, indicates whether files database date latest published files.","code":"store_bikedata (city = 'nyc', bikedb = 'bikedb', dates = 201601:201603) # [1] 2019513 tm <- bike_tripmat (bikedb = 'bikedb') dim (tm); format (sum (tm), big.mark = ',') #> [1] 518 518 #> [1] \"2,019,513\" bike_daily_trips (bikedb = 'bikedb') #> # A tibble: 87 x 2 #>    date       numtrips #>    <chr>         <dbl> #>  1 2016-01-01    11172 #>  2 2016-01-02    14794 #>  3 2016-01-03    15775 #>  4 2016-01-04    19879 #>  5 2016-01-05    18326 #>  6 2016-01-06    24922 #>  7 2016-01-07    28215 #>  8 2016-01-08    29131 #>  9 2016-01-08    21140 #> 10 2016-01-10    14481 #> # … with 77 more rows bike_summary_stats (bikedb = 'bikedb') #>    num_trips num_stations          first_trip       last_trip latest_files #> ny  2019513          518 2016-01-01 00:00    2016-03-31 23:59        FALSE"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"21-filtering-trips-by-dates-times-and-weekdays","dir":"","previous_headings":"2 Usage","what":"2.1 Filtering trips by dates, times, and weekdays","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"Trip matrices can constructed trips filtered dates, days week, times day, combination . temporal extent bikedata database given bike_summary_stats() function, can directly viewed Additional temporal arguments may passed bike_tripmat function include start_date, end_date, start_time, end_time, weekday. Dates times may specified almost format, larger units must always precede smaller units (years months days; hours minutes seconds). following examples illustrate variety acceptable formats arguments.","code":"bike_datelimits (bikedb = 'bikedb') #>              first               last  #> \"2016-01-01 00:00\" \"2016-03-31 23:59\" tm <- bike_tripmat ('bikedb', start_date = \"20160102\") tm <- bike_tripmat ('bikedb', start_date = 20160102, end_date = \"16/02/28\") tm <- bike_tripmat ('bikedb', start_time = 0, end_time = 1) # 00:00 - 01:00 tm <- bike_tripmat ('bikedb', start_date = 20160101, end_date = \"16,02,28\",                  start_time = 6, end_time = 24) # 06:00 - 23:59 tm <- bike_tripmat ('bikedb', weekday = 1) # 1 = Sunday tm <- bike_tripmat ('bikedb', weekday = c('m', 'Th')) tm <- bike_tripmat ('bikedb', weekday = 2:6,                     start_time = \"6:30\", end_time = \"10:15:25\")"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"22-filtering-trips-by-demographic-characteristics","dir":"","previous_headings":"2 Usage","what":"2.2 Filtering trips by demographic characteristics","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"Trip matrices can also filtered demographic characteristics specifying three additional arguments member, gender, birth_year. member = 0 equivalent member = FALSE, 1 equivalent TRUE. gender specified numerically values 2, 1, 0 respectively translate female, male, unspecified. following lines demonstrate functionality","code":"sum (bike_tripmat ('bikedb', member = 0)) sum (bike_tripmat ('bikedb', gender = 'female')) sum (bike_tripmat ('bikedb', weekday = 'sat', birth_year = 1980:1990,                    gender = 'unspecified'))"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"3-citation","dir":"","previous_headings":"2 Usage","what":"3. Citation","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"","code":"citation (\"bikedata\") #>  #> To cite bikedata in publications use: #>  #>   Mark Padgham, Richard Ellison (2017). bikedata Journal of Open Source Software, 2(20). URL #>   https://doi.org/10.21105/joss.00471 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {bikedata}, #>     author = {Mark Padgham and Richard Ellison}, #>     journal = {The Journal of Open Source Software}, #>     year = {2017}, #>     volume = {2}, #>     number = {20}, #>     month = {Dec}, #>     publisher = {The Open Journal}, #>     url = {https://doi.org/10.21105/joss.00471}, #>     doi = {10.21105/joss.00471}, #>   }"},{"path":"https://docs.ropensci.org/bikedata/index.html","id":"4-code-of-conduct","dir":"","previous_headings":"2 Usage","what":"4. Code of Conduct","title":"Download and Aggregate Data from Public Hire Bicycle Systems","text":"Please note project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/bikedata/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"R package bikedata collates facilitates access arguably world’s largest open ongoing dataset human mobility. comparable sources data (public transit data, mobile phone data) either publicly available, released single distinct times single distinct purposes. Many public hire bicycle systems U.S.., along Santander Cycles London, U.K., issue ongoing releases usage data, providing unique source data analysing, visualising, understanding human movement urban environments [@Austwick2013; @Borgnat2011; @Padgham2012]. data provide invaluable resource urban planners, geographers, social health scientists policy makers, data visualisation specialists, data-affine users systems . bikedata package aims provide unified access usage statistics public hire bicycle systems provide data. currently including Santander Cycles London, U.K., U.S.., citibike New York City NY, Divvy Chicago IL, Capital Bikeshare Washington DC, Hubway Boston MA, Metro Los Angeles LA, Indego Philadelphia PA. Additional systems added ongoing basis. package facilitates three necessary steps (1) downloading data; (2) storing data readily accessible form (case single SQLite3 database); (3) extracting aggregate statistics. two primary aggregate statistics matrices numbers trips pairs stations, daily time series. forms aggregation may extracted specific dates, times, demographic characteristics cyclists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bikedata/reference/bike_cities.html","id":null,"dir":"Reference","previous_headings":"","what":"List of cities currently included in bikedata — bike_cities","title":"List of cities currently included in bikedata — bike_cities","text":"List cities currently included bikedata","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_cities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of cities currently included in bikedata — bike_cities","text":"","code":"bike_cities()"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_cities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of cities currently included in bikedata — bike_cities","text":"data.frame cities, abbreviations, names bike systems currently able accessed.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_cities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of cities currently included in bikedata — bike_cities","text":"","code":"bike_cities () #>    city     city_name      bike_system #> 1    bo        Boston           Hubway #> 2    ch       Chicago            Divvy #> 3    dc Washington DC CapitalBikeShare #> 4    gu   Guadalajara           mibici #> 5    la   Los Angeles            Metro #> 6    lo        London        Santander #> 7    mo      Montreal             Bixi #> 8    mn   Minneapolis         NiceRide #> 9    ny      New York         Citibike #> 10   ph  Philadelphia           Indego #> 11   sf      Bay Area       FordGoBike"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_daily_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract daily trip counts for all stations — bike_daily_trips","title":"Extract daily trip counts for all stations — bike_daily_trips","text":"Extract daily trip counts stations","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_daily_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract daily trip counts for all stations — bike_daily_trips","text":"","code":"bike_daily_trips(   bikedb,   city,   station,   member,   birth_year,   gender,   standardise = FALSE )"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_daily_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract daily trip counts for all stations — bike_daily_trips","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir(). city City trips counted - mandatory database contains data one city station Optional argument specifying bike station trips counted member given, extract trips registered members (member = 1 TRUE) (member = 0 FALSE). birth_year given, extract trips registered members whose declared birth years equal lie within specified value values. gender given, extract records trips registered users declaring specified genders (f/m/. 2/1/0). standardise TRUE, daily trip counts standardised relative numbers bike stations operation day, daily trip counts increased (generally early) periods relatively fewer stations, decreased (generally later) periods stations.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_daily_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract daily trip counts for all stations — bike_daily_trips","text":"data.frame containing daily dates total numbers trips","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_daily_trips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract daily trip counts for all stations — bike_daily_trips","text":"","code":"if (FALSE) { bike_write_test_data () # by default in tempdir () # dl_bikedata (city = \"la\", data_dir = data_dir) # or some real data! store_bikedata (data_dir = tempdir (), bikedb = \"testdb\") # create database indexes for quicker access: index_bikedata_db (bikedb = \"testdb\")  bike_daily_trips (bikedb = \"testdb\", city = \"ny\") bike_daily_trips (bikedb = \"testdb\", city = \"ny\", member = TRUE) bike_daily_trips (bikedb = \"testdb\", city = \"ny\", gender = \"f\") bike_daily_trips (bikedb = \"testdb\", city = \"ny\", station = \"173\",                   gender = 1)  bike_rm_test_data () bike_rm_db (\"testdb\") # don't forget to remove real data! # file.remove (list.files (\".\", pattern = \".zip\")) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_datelimits.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract date-time limits from trip database — bike_datelimits","title":"Extract date-time limits from trip database — bike_datelimits","text":"Extract date-time limits trip database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_datelimits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract date-time limits from trip database — bike_datelimits","text":"","code":"bike_datelimits(bikedb, city)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_datelimits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract date-time limits from trip database — bike_datelimits","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir(). city given, date limits calculated trips city.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_datelimits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract date-time limits from trip database — bike_datelimits","text":"vector 2 elements giving date-time first last trips","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_datelimits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract date-time limits from trip database — bike_datelimits","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # dl_bikedata (city = 'la', data_dir = data_dir) # or some real data! # Remove one London file that triggers an API call which may fail tests: file.remove (file.path (tempdir(),              \"01aJourneyDataExtract10Jan16-23Jan16.csv\")) bikedb <- file.path (data_dir, 'testdb') store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  bike_datelimits ('testdb') # overall limits for all cities bike_datelimits ('testdb', city = 'NYC') bike_datelimits ('testdb', city = 'los angeles')  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files ('.', pattern = '.zip')) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_db_totals.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of entries in sqlite3 database tables — bike_db_totals","title":"Count number of entries in sqlite3 database tables — bike_db_totals","text":"Count number entries sqlite3 database tables","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_db_totals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of entries in sqlite3 database tables — bike_db_totals","text":"","code":"bike_db_totals(bikedb, trips = TRUE, city)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_db_totals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of entries in sqlite3 database tables — bike_db_totals","text":"bikedb string containing path SQLite3 database. trips true, numbers trips counted; otherwise numbers stations city Optional city numbers trips counted","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_db_totals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of entries in sqlite3 database tables — bike_db_totals","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) bikedb <- file.path (data_dir, 'testdb') # latest_lo_stns is set to FALSE just to avoid download on CRAN; this should # normally remain at default value of TRUE: store_bikedata (data_dir = data_dir, bikedb = bikedb, latest_lo_stns = FALSE) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  bike_db_totals (bikedb = bikedb, trips = TRUE) # total trips bike_db_totals (bikedb = bikedb, trips = TRUE, city = 'ch') bike_db_totals (bikedb = bikedb, trips = TRUE, city = 'ny') bike_db_totals (bikedb = bikedb, trips = FALSE) # total stations bike_db_totals (bikedb = bikedb, trips = FALSE, city = 'ch') bike_db_totals (bikedb = bikedb, trips = FALSE, city = 'ny') # numbers of stations can also be extracted with nrow (bike_stations (bikedb = bikedb)) nrow (bike_stations (bikedb = bikedb, city = 'ch'))  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files ('.', pattern = '.zip')) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_demographic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Static summary of which systems provide demographic data — bike_demographic_data","title":"Static summary of which systems provide demographic data — bike_demographic_data","text":"Static summary systems provide demographic data","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_demographic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static summary of which systems provide demographic data — bike_demographic_data","text":"","code":"bike_demographic_data()"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_demographic_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static summary of which systems provide demographic data — bike_demographic_data","text":"data.frame detailing kinds demographic data provided different systems","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_demographic_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static summary of which systems provide demographic data — bike_demographic_data","text":"","code":"bike_demographic_data () #>    city     city_name      bike_system demographic_data #> 1    bo        Boston           Hubway             TRUE #> 2    ch       Chicago            Divvy             TRUE #> 3    dc Washington DC CapitalBikeShare            FALSE #> 4    gu   Guadalajara           mibici             TRUE #> 5    la   Los Angeles            Metro            FALSE #> 6    lo        London        Santander            FALSE #> 7    mo      Montreal             Bixi            FALSE #> 8    mn   Minneapolis         NiceRide             TRUE #> 9    ny      New York         Citibike             TRUE #> 10   ph  Philadelphia           Indego            FALSE #> 11   sf      Bay Area       FordGoBike             TRUE # Examples of filtering data by demographic parameters: if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  sum (bike_tripmat (bikedb = bikedb, city = \"bo\")) # 200 trips sum (bike_tripmat (bikedb = bikedb, city = \"bo\", birth_year = 1990)) # 9 sum (bike_tripmat (bikedb = bikedb, city = \"bo\", gender = \"f\")) # 22 sum (bike_tripmat (bikedb = bikedb, city = \"bo\", gender = 2)) # 22 sum (bike_tripmat (bikedb = bikedb, city = \"bo\", gender = 1)) # = m; 68 sum (bike_tripmat (bikedb = bikedb, city = \"bo\", gender = 0)) # = n; 9 # Sum of gender-filtered trips is less than total because \\code{gender = 0} # extracts all registered users with unspecified genders, while without # gender filtering extracts all trips for registered and non-registered # users.  # The following generates an error because Washinton DC's DivvyBike system # does not provide demographic data sum (bike_tripmat (bikedb = bikedb, city = \"dc\", birth_year = 1990)) bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_distmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract station-to-station distance matrix — bike_distmat","title":"Extract station-to-station distance matrix — bike_distmat","text":"Extract station--station distance matrix","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_distmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract station-to-station distance matrix — bike_distmat","text":"","code":"bike_distmat(bikedb, city, expand = 0.5, long = FALSE, quiet = TRUE)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_distmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract station-to-station distance matrix — bike_distmat","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir(). city City tripmat aggregated expand Distances calculated routing OpenStreetMap street network surrounding bike stations, street network expanded amount ensure stations can connected. long FALSE, square distance matrix (num-stations, num_stations) returned; TRUE, long-format matrix (stn-, stn-, distance) returned. quiet FALSE, progress displayed screen","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_distmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract station-to-station distance matrix — bike_distmat","text":"long = FALSE, square matrix numbers trips station, otherwise long-form tibble three columns (start_station_id, end_station_id, distance)","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_distmat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract station-to-station distance matrix — bike_distmat","text":"Distance matrices returned bike_distamat use stations listed given system, trip matrices extracted bike_tripmat often fewer stations operational station numbers commonly vary time. two matrices may reconciled match_trips2dists function, enabling directly compared.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_latest_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether files in database are the latest published files — bike_latest_files","title":"Check whether files in database are the latest published files — bike_latest_files","text":"Check whether files database latest published files","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_latest_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether files in database are the latest published files — bike_latest_files","text":"","code":"bike_latest_files(bikedb)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_latest_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether files in database are the latest published files — bike_latest_files","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir().","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_latest_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether files in database are the latest published files — bike_latest_files","text":"named vector binary values: TRUE files bikedb latest versions; otherwise FALSE, case store_bikedata run update database.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_latest_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether files in database are the latest published files — bike_latest_files","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = 'la', data_dir = data_dir) # Remove one London file that triggers an API call which may fail tests: file.remove (file.path (tempdir(),              \"01aJourneyDataExtract10Jan16-23Jan16.csv\")) bikedb <- file.path (data_dir, 'testdb') store_bikedata (data_dir = data_dir, bikedb = bikedb) # bike_latest_files (bikedb) # All false because test data are not current, but would pass with real data  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = '.zip')) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_match_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Match rows and columns of distance and trip matrices — bike_match_matrices","title":"Match rows and columns of distance and trip matrices — bike_match_matrices","text":"Match rows columns distance trip matrices","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_match_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match rows and columns of distance and trip matrices — bike_match_matrices","text":"","code":"bike_match_matrices(mat1, mat2)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_match_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match rows and columns of distance and trip matrices — bike_match_matrices","text":"mat1 wide- long-form trip distance matrix returned bike_tripmat bike_distmat. mat2 corresponding distance trip matrix.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_match_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match rows and columns of distance and trip matrices — bike_match_matrices","text":"list matrices matching start end stations, order passed routine (, mat1 mat2). kind matrix identified named accordingly either \"trip\" \"dist\". Matrices returned format (long wide) submitted.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_match_matrices.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Match rows and columns of distance and trip matrices — bike_match_matrices","text":"Distance matrices returned bike_distamat use stations listed given system, trip matrices extracted bike_tripmat often fewer stations operational station numbers commonly vary time. function reconciles two matrices matching row column names (just station IDs long-form matrices), enabling directly compared.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","title":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","text":"directory specified bikedb argument passed store_bikedata, database created tempdir(). function provides convenient way remove database cases simply passing name.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","text":"","code":"bike_rm_db(bikedb)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","text":"bikedb SQLite3 database containing bikedata.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","text":"TRUE bikedb successfully removed; otherwise FALSE","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove SQLite3 database generated with 'store_bikedat()' — bike_rm_db","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = \"la\", data_dir = data_dir) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb)  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = \".zip\")) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","title":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","text":"function bike_write_test_data() writes several small zip-compressed files disk. default location tempdir(), case files automatically removed termination current R session. , however, value data_dir passed bike_write_test_data(), resultant files deleted calling function.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","text":"","code":"bike_rm_test_data(data_dir = tempdir())"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","text":"data_dir Directory data extracted.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","text":"Number files successfully removed, equal six.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_rm_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes test data written with 'bike_write_test_data()' — bike_rm_test_data","text":"","code":"if (FALSE) { bike_write_test_data () list.files (tempdir ()) bike_rm_test_data ()  bike_write_test_data (data_dir = getwd ()) list.files () bike_rm_test_data (data_dir = getwd ()) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract station matrix from SQLite3 database — bike_stations","title":"Extract station matrix from SQLite3 database — bike_stations","text":"Extract station matrix SQLite3 database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract station matrix from SQLite3 database — bike_stations","text":"","code":"bike_stations(bikedb, city)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract station matrix from SQLite3 database — bike_stations","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir(). city Optional city (vector cities) stations extracted","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract station matrix from SQLite3 database — bike_stations","text":"Matrix containing data station","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract station matrix from SQLite3 database — bike_stations","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = 'la', data_dir = data_dir) bikedb <- file.path (data_dir, 'testdb') store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  stations <- bike_stations (bikedb) head (stations)  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = '.zip')) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stored_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of files read into database — bike_stored_files","title":"Get names of files read into database — bike_stored_files","text":"Get names files read database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stored_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of files read into database — bike_stored_files","text":"","code":"bike_stored_files(bikedb, city)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stored_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of files read into database — bike_stored_files","text":"bikedb string containing path SQLite3 database. city Optional city filenames obtained","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_stored_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of files read into database — bike_stored_files","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) bikedb <- file.path (data_dir, 'testdb') store_bikedata (data_dir = data_dir, bikedb = bikedb) files <- bike_stored_files (bikedb = bikedb) # returns a tibble with names of all stored files  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files ('.', pattern = '.zip')) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary statistics of database — bike_summary_stats","title":"Extract summary statistics of database — bike_summary_stats","text":"Extract summary statistics database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary statistics of database — bike_summary_stats","text":"","code":"bike_summary_stats(bikedb)"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary statistics of database — bike_summary_stats","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir().","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary statistics of database — bike_summary_stats","text":"data.frame containing numbers trips stations along times dates first last trips city database final column indicating whether files match latest published versions.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary statistics of database — bike_summary_stats","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # dl_bikedata (city = \"la\", data_dir = data_dir) # or some real data! # Remove one London file that triggers an API call which may fail tests: file.remove (file.path (tempdir(),              \"01aJourneyDataExtract10Jan16-23Jan16.csv\")) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  bike_summary_stats (\"testdb\")  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (\".\", pattern = \".zip\")) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data for all 6 cities — bike_test_data","title":"Test data for all 6 cities — bike_test_data","text":"data set containing six cities data.frame object 200 trips.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data for all 6 cities — bike_test_data","text":"","code":"bike_test_data"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_test_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test data for all 6 cities — bike_test_data","text":"list one data frame five cities (bo, dc, la, lo, ny), plus two chicago stations trips (ch_st, ch_tr). (except \"ch_st\") contains 200 representative trips.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_test_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test data for all 6 cities — bike_test_data","text":"data used convert .zip-compressed files using bike_write_test_data(). .zip files can subsequently read SQLite3 database using store_bikedata.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"Extract station--station trip matrix data.frame SQLite3 database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"","code":"bike_tripmat(   bikedb,   city,   start_date,   end_date,   start_time,   end_time,   weekday,   member,   birth_year,   gender,   standardise = FALSE,   long = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"bikedb string containing path SQLite3 database. directory specified, presumed tempdir(). city City tripmat aggregated start_date given (year, month, day) , extract records including date end_date given (year, month, day), extract records including date start_time given, extract records starting including time day end_time given, extract records ending including time day weekday given, extract records including nominated weekdays. can vector numeric, starting Sunday=1, unambiguous characters, \"sa\" \"tu\" Saturday Tuesday. member given, extract trips registered members (member = 1 TRUE) (member = 0 FALSE). birth_year given, extract trips registered members whose declared birth years equal lie within specified value values. gender given, extract records trips registered users declaring specified genders (f/m/. 2/1/0). standardise TRUE, numbers trips standardised operating durations stations, trip numbers increased stations operated short time, vice versa. long FALSE, square tripmat (num-stations, num_stations) returned; TRUE, long-format matrix (stn-, stn-, ntrips) returned. quiet FALSE, progress displayed screen","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"long = FALSE, square matrix numbers trips station, otherwise long-form tibble three columns (start_station_id, end_station_id, numtrips).","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"city parameter given databases containing data multiple cities, otherwise resultant trip matrix likely empty.  dates times may given either numeric character format, arbitrary () delimiters fields. Single numeric times interpreted hours, 24 interpreted day's end 23:59:59. standardise = TRUE, trip matrix number trips, re-distributed described, recent stations trips older stations. Trip number also non-integer case, whereas always integer-valued standardise = FALSE.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_tripmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract station-to-station trip matrix or data.frame from SQLite3 database — bike_tripmat","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = \"la\", data_dir = data_dir) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)   tm <- bike_tripmat (bikedb = bikedb, city = \"ny\") # full trip matrix tm <- bike_tripmat (bikedb = bikedb, city = \"ny\",                     start_date = 20161201, end_date = 20161201) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", start_time = 1) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", start_time = \"01:00\") tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", end_time = \"01:00\") tm <- bike_tripmat (bikedb = bikedb, city = \"ny\",                     start_date = 20161201, start_time = 1) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", start_date = 20161201,                     end_date = 20161201, start_time = 1, end_time = 2) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", weekday = 5) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\",                     weekday = c(\"f\", \"sa\", \"th\")) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\",                     weekday = c(\"f\", \"th\", \"sa\")) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", member = 1) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", birth_year = 1976) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", birth_year = 1976:1990) tm <- bike_tripmat (bikedb = bikedb, city = \"ny\", gender = \"f\") tm <- bike_tripmat (bikedb = bikedb, city = \"ny\",                     gender = \"m\", birth_year = 1976:1990)  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = \".zip\")) }"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_write_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes test data bundled with package to zip files — bike_write_test_data","title":"Writes test data bundled with package to zip files — bike_write_test_data","text":"Writes small test files disk can used test package. entire package works reading zip-compressed data files provided various hire bicycle systems. function generates equivalent data can read SQLite database store_bikedata() function, package functionality can tested resultant database. function also used examples functions.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_write_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes test data bundled with package to zip files — bike_write_test_data","text":"","code":"bike_write_test_data(data_dir = tempdir())"},{"path":"https://docs.ropensci.org/bikedata/reference/bike_write_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes test data bundled with package to zip files — bike_write_test_data","text":"data_dir Directory data extracted. Defaults tempdir(). directory specified, files removed bike_rm_test_data().","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bike_write_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes test data bundled with package to zip files — bike_write_test_data","text":"","code":"if (FALSE) { bike_write_test_data () list.files (tempdir ()) bike_rm_test_data ()  bike_write_test_data (data_dir = '.') list.files () bike_rm_test_data (data_dir = '.') }"},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and aggregate data from public bicycle hire systems — bikedata","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"Download data public bicycle hire systems provide open data, currently including Santander Cycles London, U.K. citibike New York City NY, U.S.. Divvy Chicago IL, U.S.. Capital BikeShare Washingon DC, U.S.. Hubway Boston MA, U.S.. Metro Los Angeles CA, U.S..","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":"download-and-store-data","dir":"Reference","previous_headings":"","what":"Download and store data","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"dl_bikedata Download data particular cities dates store_bikedata Store data SQLite3 database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":"sample-data-for-testing-package","dir":"Reference","previous_headings":"","what":"Sample data for testing package","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"bike_test_data Description test data included package bike_write_test_data Write test data disk form precisely reflecting data provided systems bike_rm_test_data Remove data written disk bike_write_test_data","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":"functions-to-aggregate-trip-data","dir":"Reference","previous_headings":"","what":"Functions to aggregate trip data","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"bike_daily_trips Aggregate daily time series total trips bike_stations Extract table detailing locations names bicycle docking stations bike_tripmat Extract aggregate counts trips pairs stations within given city","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":"summary-statistics","dir":"Reference","previous_headings":"","what":"Summary Statistics","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"bike_summary_stats Overall quantitative summary database contents.  following functions provide individual aspects summary. bike_db_totals Count total numbers trips stations, either entire database specified city. bike_datelimits Return dates first last trips, either entire database specified city. bike_demographic_data Simple table indicating cities include demographic parameters data bike_latest_files Check whether files contained database latest published versions","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/bikedata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and aggregate data from public bicycle hire systems — bikedata","text":"Mark Padgham","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Download hire bicycle data — dl_bikedata","title":"Download hire bicycle data — dl_bikedata","text":"Download data subsequent storage via store_bikedata.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download hire bicycle data — dl_bikedata","text":"","code":"dl_bikedata(city, data_dir = tempdir(), dates = NULL, quiet = FALSE)  download_bikedata(city, data_dir = tempdir(), dates = NULL, quiet = FALSE)"},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download hire bicycle data — dl_bikedata","text":"city City download bike data, name corresponding bike system (see Details ). data_dir Directory download files dates Character vector dates download data dates formated YYYYMM. quiet FALSE, progress displayed screen","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download hire bicycle data — dl_bikedata","text":"files already exist data_dir downloaded, function may thus used update directory files downloading recent files. particular file request fails, downloading continue regardless. ensure files downloaded, function may need run several times message appears declaring 'data files already exist'","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download hire bicycle data — dl_bikedata","text":"function produces (generally) zip-compressed data R's temporary directory. City names case sensitive, must long enough unambiguously designate desired city. Names corresponding bike systems can also given.  Currently possible cities (minimal designations parentheses) names bike hire systems : Ensure fast internet connection least 100 Mb space","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/dl_bikedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download hire bicycle data — dl_bikedata","text":"","code":"if (FALSE) { dl_bikedata (city = 'New York City USA', dates = 201601:201613) }"},{"path":"https://docs.ropensci.org/bikedata/reference/index_bikedata_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Add indexes to database created with store_bikedata — index_bikedata_db","title":"Add indexes to database created with store_bikedata — index_bikedata_db","text":"Add indexes database created store_bikedata","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/index_bikedata_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add indexes to database created with store_bikedata — index_bikedata_db","text":"","code":"index_bikedata_db(bikedb)"},{"path":"https://docs.ropensci.org/bikedata/reference/index_bikedata_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add indexes to database created with store_bikedata — index_bikedata_db","text":"bikedb SQLite3 database containing bikedata.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/index_bikedata_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add indexes to database created with store_bikedata — index_bikedata_db","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = \"la\", data_dir = data_dir) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  trips <- bike_tripmat (bikedb = bikedb, city = \"LA\") # trip matrix stations <- bike_stations (bikedb = bikedb) # station data  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = \".zip\")) }"},{"path":"https://docs.ropensci.org/bikedata/reference/lo_stns.html","id":null,"dir":"Reference","previous_headings":"","what":"Docking stations for London, U.K. — lo_stns","title":"Docking stations for London, U.K. — lo_stns","text":"data.frame station id values, names, geographic coordinates 786 stations London, U.K. stations generally (default) downloaded automatically ensure always date, downloading can disabled store_bikedata() function setting latest_lo_stns = FALSE.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/lo_stns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Docking stations for London, U.K. — lo_stns","text":"","code":"lo_stns"},{"path":"https://docs.ropensci.org/bikedata/reference/lo_stns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Docking stations for London, U.K. — lo_stns","text":"data.frame four columns described .","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Store hire bicycle data in SQLite3 database — store_bikedata","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"Store previously downloaded data (via dl_bikedata function) database subsequent extraction analysis.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"","code":"store_bikedata(   bikedb,   city,   data_dir,   dates = NULL,   latest_lo_stns = TRUE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"bikedb string containing path SQLite3 database use. already exist, created, otherwise data appended existing database.  directory specified, presumed tempdir(). city One cities download store bike data, names corresponding bike systems (see Details ). data_dir character vector giving directory containing data files downloaded dl_bikedata one cities. parameter missing data downloaded. dates specified data_dir given, data downloaded stored dates specified vector YYYYMM values. latest_lo_stns TRUE (default), download latest version London stations; otherwise use potentially obsolete internal version. (parameter need changed, can set FALSE avoid external calls; example online.) quiet FALSE, progress displayed screen","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"Number trips added database","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"Data different cities may stored database, city identifiers automatically established names downloaded data files. function can take quite long time execute, may generate SQLite3 database file several gigabytes size.","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"City names case sensitive, must long enough unambiguously designate desired city. Names corresponding bike systems can also given.  Currently possible cities (minimal designations parentheses) names bike hire systems :","code":""},{"path":"https://docs.ropensci.org/bikedata/reference/store_bikedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store hire bicycle data in SQLite3 database — store_bikedata","text":"","code":"if (FALSE) { data_dir <- tempdir () bike_write_test_data (data_dir = data_dir) # or download some real data! # dl_bikedata (city = \"la\", data_dir = data_dir) bikedb <- file.path (data_dir, \"testdb\") store_bikedata (data_dir = data_dir, bikedb = bikedb) # create database indexes for quicker access: index_bikedata_db (bikedb = bikedb)  trips <- bike_tripmat (bikedb = bikedb, city = \"LA\") # trip matrix stations <- bike_stations (bikedb = bikedb) # station data  bike_rm_test_data (data_dir = data_dir) bike_rm_db (bikedb) # don't forget to remove real data! # file.remove (list.files (data_dir, pattern = \".zip\")) }"}]
